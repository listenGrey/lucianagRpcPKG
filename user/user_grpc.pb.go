// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0--rc1
// source: user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckExistenceClient is the client API for CheckExistence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckExistenceClient interface {
	RegisterCheck(ctx context.Context, in *RegisterEmail, opts ...grpc.CallOption) (*Existence, error)
}

type checkExistenceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckExistenceClient(cc grpc.ClientConnInterface) CheckExistenceClient {
	return &checkExistenceClient{cc}
}

func (c *checkExistenceClient) RegisterCheck(ctx context.Context, in *RegisterEmail, opts ...grpc.CallOption) (*Existence, error) {
	out := new(Existence)
	err := c.cc.Invoke(ctx, "/lucianagRpcPKG.CheckExistence/RegisterCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckExistenceServer is the server API for CheckExistence service.
// All implementations must embed UnimplementedCheckExistenceServer
// for forward compatibility
type CheckExistenceServer interface {
	RegisterCheck(context.Context, *RegisterEmail) (*Existence, error)
	mustEmbedUnimplementedCheckExistenceServer()
}

// UnimplementedCheckExistenceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckExistenceServer struct {
}

func (UnimplementedCheckExistenceServer) RegisterCheck(context.Context, *RegisterEmail) (*Existence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCheck not implemented")
}
func (UnimplementedCheckExistenceServer) mustEmbedUnimplementedCheckExistenceServer() {}

// UnsafeCheckExistenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckExistenceServer will
// result in compilation errors.
type UnsafeCheckExistenceServer interface {
	mustEmbedUnimplementedCheckExistenceServer()
}

func RegisterCheckExistenceServer(s grpc.ServiceRegistrar, srv CheckExistenceServer) {
	s.RegisterService(&CheckExistence_ServiceDesc, srv)
}

func _CheckExistence_RegisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckExistenceServer).RegisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucianagRpcPKG.CheckExistence/RegisterCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckExistenceServer).RegisterCheck(ctx, req.(*RegisterEmail))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckExistence_ServiceDesc is the grpc.ServiceDesc for CheckExistence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckExistence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lucianagRpcPKG.CheckExistence",
	HandlerType: (*CheckExistenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCheck",
			Handler:    _CheckExistence_RegisterCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// RegisterInfoClient is the client API for RegisterInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterInfoClient interface {
	Register(ctx context.Context, in *RegisterForm, opts ...grpc.CallOption) (*Success, error)
}

type registerInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterInfoClient(cc grpc.ClientConnInterface) RegisterInfoClient {
	return &registerInfoClient{cc}
}

func (c *registerInfoClient) Register(ctx context.Context, in *RegisterForm, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/lucianagRpcPKG.RegisterInfo/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterInfoServer is the server API for RegisterInfo service.
// All implementations must embed UnimplementedRegisterInfoServer
// for forward compatibility
type RegisterInfoServer interface {
	Register(context.Context, *RegisterForm) (*Success, error)
	mustEmbedUnimplementedRegisterInfoServer()
}

// UnimplementedRegisterInfoServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterInfoServer struct {
}

func (UnimplementedRegisterInfoServer) Register(context.Context, *RegisterForm) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegisterInfoServer) mustEmbedUnimplementedRegisterInfoServer() {}

// UnsafeRegisterInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterInfoServer will
// result in compilation errors.
type UnsafeRegisterInfoServer interface {
	mustEmbedUnimplementedRegisterInfoServer()
}

func RegisterRegisterInfoServer(s grpc.ServiceRegistrar, srv RegisterInfoServer) {
	s.RegisterService(&RegisterInfo_ServiceDesc, srv)
}

func _RegisterInfo_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterInfoServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucianagRpcPKG.RegisterInfo/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterInfoServer).Register(ctx, req.(*RegisterForm))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterInfo_ServiceDesc is the grpc.ServiceDesc for RegisterInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lucianagRpcPKG.RegisterInfo",
	HandlerType: (*RegisterInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RegisterInfo_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}

// LoginCheckClient is the client API for LoginCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginCheckClient interface {
	LoginCheck(ctx context.Context, in *LoginForm, opts ...grpc.CallOption) (*LogInfo, error)
}

type loginCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginCheckClient(cc grpc.ClientConnInterface) LoginCheckClient {
	return &loginCheckClient{cc}
}

func (c *loginCheckClient) LoginCheck(ctx context.Context, in *LoginForm, opts ...grpc.CallOption) (*LogInfo, error) {
	out := new(LogInfo)
	err := c.cc.Invoke(ctx, "/lucianagRpcPKG.LoginCheck/LoginCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginCheckServer is the server API for LoginCheck service.
// All implementations must embed UnimplementedLoginCheckServer
// for forward compatibility
type LoginCheckServer interface {
	LoginCheck(context.Context, *LoginForm) (*LogInfo, error)
	mustEmbedUnimplementedLoginCheckServer()
}

// UnimplementedLoginCheckServer must be embedded to have forward compatible implementations.
type UnimplementedLoginCheckServer struct {
}

func (UnimplementedLoginCheckServer) LoginCheck(context.Context, *LoginForm) (*LogInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCheck not implemented")
}
func (UnimplementedLoginCheckServer) mustEmbedUnimplementedLoginCheckServer() {}

// UnsafeLoginCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginCheckServer will
// result in compilation errors.
type UnsafeLoginCheckServer interface {
	mustEmbedUnimplementedLoginCheckServer()
}

func RegisterLoginCheckServer(s grpc.ServiceRegistrar, srv LoginCheckServer) {
	s.RegisterService(&LoginCheck_ServiceDesc, srv)
}

func _LoginCheck_LoginCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginCheckServer).LoginCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lucianagRpcPKG.LoginCheck/LoginCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginCheckServer).LoginCheck(ctx, req.(*LoginForm))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginCheck_ServiceDesc is the grpc.ServiceDesc for LoginCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lucianagRpcPKG.LoginCheck",
	HandlerType: (*LoginCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginCheck",
			Handler:    _LoginCheck_LoginCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
